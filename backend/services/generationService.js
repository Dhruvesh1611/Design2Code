const https = require('https');


async function getCodeFromAI(userPrompt) {
   const apiKey = process.env.GEMINI_API_KEY;

    
    if (!apiKey) {
        console.error("FATAL ERROR: GEMINI_API_KEY is not set or not loaded from your .env file.");
        return "Server configuration error: The API key is missing. Please check server logs.";
    }

    const unifiedPrompt = `
        **Role and Task:** You are an expert web developer. Your task is to generate a complete, single-file, responsive HTML document with modern design practices. 
        
        **Output Requirements:**
        1.  The HTML file must include inline CSS within a single <style> tag.
        2.  Do NOT include any explanations, markdown formatting (like \`\`\`html), or any text other than the pure HTML code.
        3.  The response must be a valid HTML document starting with <!DOCTYPE html> and ending with </html>.

        ---

        **User's Website Request:**
        ${userPrompt}
    `;

    const payload = JSON.stringify({
        contents: [
            {
                role: "user",
                parts: [{ text: unifiedPrompt }]
            }
        ],
        generationConfig: {
            temperature: 0.4,
            topK: 1,
            topP: 1,
            maxOutputTokens: 8192,
            responseMimeType: "text/plain",
        }
    });

    const options = {
        hostname: 'generativelanguage.googleapis.com',
        path: `/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`,
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': payload.length,
        },
    };

    return new Promise((resolve, reject) => {
        console.log("Sending prompt to Gemini API using native https module...");

        const req = https.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                if (res.statusCode >= 200 && res.statusCode < 300) {
                    try {
                        const responseBody = JSON.parse(data);
                        if (responseBody.candidates && responseBody.candidates[0].content.parts[0].text) {
                            console.log("Success! Code has been generated by the AI.");
                            resolve(responseBody.candidates[0].content.parts[0].text);
                        } else {
                            console.error('Prompt was likely blocked or response is empty:', data);
                            reject(new Error("The AI returned an empty response. The prompt may have been blocked."));
                        }
                    } catch (e) {
                        console.error('Failed to parse Gemini API response:', e);
                        reject(e);
                    }
                } else {
                    console.error(`API request failed with status code ${res.statusCode}: ${data}`);
                    reject(new Error(`API request failed with status code ${res.statusCode}`));
                }
            });
        });

        req.on('error', (error) => {
            console.error('Failed to make API request:', error);
            reject(error);
        });

        req.write(payload);
        req.end();
    });
}

module.exports = {
    getCodeFromAI,
};

